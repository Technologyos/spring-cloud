version: '3.8'

services:
  registry-discovery:
    container_name: eureka-server
    image: springservice/microservice-docker-eureka:0.0.1-SNAPSHOT
    ports:
      - 8761:8761
    environment:
      - JAVA_OPTS=
        -Xms256M
        -Xmx256M
    networks:
      - discovery-network

  configuration:
    container_name: config-server
    image: springservice/microservice-docker-config-server:0.0.1-SNAPSHOT
    volumes:
      - ./configs/spring-config-credentials:/tmp/spring-config-credentials
    environment:
      - JAVA_OPTS=${JAVA_OPTS_CONFIG_SERVER}
    depends_on:
      - registry-discovery
    ports:
      - 8888:8888
    networks:
      - discovery-network

  employee:
    container_name: employee-service
    image: springservice/microservice-docker-employee:0.0.1-SNAPSHOT
    environment:
      - JAVA_OPTS=${JAVA_OPTS_SERVICE}
    depends_on:
      - registry-discovery
      - configuration
    ports:
      - 8081:8081
    networks:
      - discovery-network
      - postgres-network

  task:
    container_name: task-service
    image: springservice/microservice-docker-task:0.0.1-SNAPSHOT
    environment:
      - JAVA_OPTS=${JAVA_OPTS_SERVICE}
    depends_on:
      - registry-discovery
      - configuration
    ports:
      - 8082:8082
    networks:
      - discovery-network
      - postgres-network

  postgres:
    container_name: postgres_service
    image: postgres:14.2
    command: postgres -c 'max_connections=200'
    restart: always
    ports:
      - 5432:5432
    environment:
      POSTGRES_USER: ${PGS_USER}
      POSTGRES_PASSWORD: ${PGS_PASSWORD}
      POSTGRES_DB: ${PGS_DB}
      PGDATA: /tmp
    volumes:
      - postgres-data:/var/lib/postgresql/data
    healthcheck:
      test: "exit 0"
    networks:
      - postgres-network

  pgadmin4:
    container_name: pgadmin4-service
    image: dpage/pgadmin4:8.4
    restart: always
    environment:
      PGADMIN_DEFAULT_EMAIL: ${PGA_EMAIL}
      PGADMIN_DEFAULT_PASSWORD: ${PGA_PASSWORD}
    ports:
      - 8080:80 #Se ha eliminado la exposición del contenedor de pgAdmin al puerto 8080 en el host. Esto se hace para evitar exponer pgAdmin directamente al público y, en su lugar, conectarlo a través de una red interna.
    depends_on:
      - postgres
    networks:
      - postgres-network

volumes:
  postgres-data:
    driver: local

networks:
  postgres-network:
    driver: bridge
  discovery-network:
    driver: bridge
